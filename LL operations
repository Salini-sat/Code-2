#include<stdio.h>
#include<stdlib.h>

struct Node{
    int data;
    struct Node* next; 
};
void traversal(struct Node*ptr){
    while(ptr!=NULL){
        printf("%d\n",ptr->data);
        ptr=ptr->next;
    }
}

struct Node* insert(struct Node* head,int value,int pos){
    struct Node* new= (struct Node*)malloc(sizeof(struct Node));
    
    struct Node* ptr= head;
    int count=1;
    while(count<(pos-1)){
        ptr=ptr->next;
        count++;
    }
    new->data=value;
    new->next=ptr->next;
    ptr->next =new;
    return head;
}
struct Node* del_at_pos(struct Node*head, int pos){
    struct Node*ptr= head;
    struct Node*q=ptr->next;
    int count =1;
    while(count <(pos-1)){
        ptr=ptr->next;
        q=q->next;
        count++;
    }
    ptr->next=q->next;
    free(q);
    return head;
}

void number(struct Node*head){
    struct Node*ptr=head;
    int count =0;
    while(ptr!=NULL){
        ptr=ptr->next;
        count++;
    }
    printf("%d\n",count);
}

void search(struct Node*head,int val){
    struct Node*ptr=head;
    int c=0;
    int k=0;
    while(ptr!=NULL){
        if(ptr->data==val){
            c++;
        }
        ptr=ptr->next;
    }
    if(c>0){
        printf("FOUND\n");
    }
    else{
        printf("NOT FOUND");
    }
}


void reverse(struct Node**head){
    struct Node* prev,* current ,* next;
    prev =NULL;
    current = *head;
    next = current->next;
    while(current!=NULL){
        current->next=prev;
        prev=current;
        current=next;
        next=current->next;
    }
    *head=prev;
    
}

int main(){
    struct Node*head;
    struct Node*second;
    struct Node*third;
    struct Node*fourth;

    head= (struct Node*)malloc(sizeof(struct Node));
    second=(struct Node*)malloc(sizeof(struct Node));
    third =(struct Node*)malloc(sizeof(struct Node));
    fourth =(struct Node*)malloc(sizeof(struct Node));

    head->data = 8;
    head->next =second;
    
    second->data = 66;
    second->next = third;

    third->data = 45;
    third->next = fourth;

    fourth->data=56;
    fourth->next=NULL;
    
    reverse(&head);
    traversal(head);


    return 0;

}
